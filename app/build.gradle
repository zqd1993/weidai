apply plugin: 'com.android.application'
apply plugin: 'android-junk-code'

android {
    signingConfigs {
        config {
            keyAlias rootProject.ext.android.keyAlias
            keyPassword rootProject.ext.android.keyPassword
            storeFile file(rootProject.ext.android.storeFile)
            storePassword rootProject.ext.android.storePassword
        }
    }
    compileSdkVersion rootProject.ext.android.compileSdkVersion

    defaultConfig {
        applicationId 'com.linghuojieasdufne.vbdsetrrte'
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
    }

    androidJunkCode {
        variantConfig {
            release {//变体名称，如果没有设置productFlavors就是buildType名称，如果有设置productFlavors就是flavor+buildType，例如（freeRelease、proRelease）
                packageBase = "com.rtyfghsq.mnbghjdftg.ui"  //生成java类根包名
                packageCount = 30 //生成包数量
                activityCountPerPackage = 3 //每个包下生成Activity类数量
                excludeActivityJavaFile = false //是否排除生成Activity的Java文件,默认false(layout和写入AndroidManifest.xml还会执行)，主要用于处理类似神策全埋点编译过慢问题
                otherCountPerPackage = 50  //每个包下生成其它类的数量
                methodCountPerClass = 20  //每个类下生成方法数量
                resPrefix = "mnbghjdftg_"  //生成的layout、drawable、string等资源名前缀
                drawableCount = 300  //生成drawable资源数量
                stringCount = 300  //生成string数量
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
        debug {
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "dazhong_v${variant.versionName}.apk"
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    annotationProcessor rootProject.ext.dependencies["butterknife-apt"]
    implementation rootProject.ext.dependencies["avi-loading"]
    implementation project(":mvp")
    implementation 'com.github.lihangleo2:ShadowLayout:3.2.4'
    implementation 'com.jaeger.statusbarutil:library:1.5.1'
    implementation 'io.github.h07000223:flycoTabLayout:3.0.0'
    implementation 'pub.devrel:easypermissions:3.0.0'
//    implementation  'com.umeng.umsdk:common:9.4.2'// 必选
//    implementation  'com.umeng.umsdk:asms:1.4.0'// 必选
//    implementation 'com.umeng.umsdk:abtest:1.0.0'//使用U-App中ABTest能力，可选
//    implementation 'com.umeng.umsdk:apm:1.5.2' // U-APM包依赖(必选)
    implementation 'com.victor:lib:1.0.4'
    implementation'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.50'
    implementation 'io.github.youth5201314:banner:2.2.2'
    implementation "androidx.viewpager2:viewpager2:1.0.0"
    implementation 'com.github.gzu-liyujiang:Android_CN_OAID:4.2.4'
}
